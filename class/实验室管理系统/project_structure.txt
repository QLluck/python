laboratory_management/              # 项目根目录
│
├── main.py                         # 程序入口文件，包含应用程序的启动逻辑
├── requirements.txt                # 项目依赖文件
├── README.md                       # 项目说明文档
│
├── config/                         # 配置文件目录
│   ├── __init__.py
│   ├── settings.py                 # 全局配置文件（数据库配置、文件路径等）
│   └── constants.py                # 常量定义（状态码、角色类型等）
│
├── database/                       # 数据库相关目录
│   ├── __init__.py
│   ├── db_manager.py              # 数据库连接管理类
│   ├── models/                    # 数据模型目录
│   │   ├── __init__.py
│   │   ├── user.py               # 用户模型
│   │   ├── course.py            # 课程模型
│   │   ├── experiment.py        # 实验任务模型
│   │   └── submission.py        # 作业提交模型
│   │
│   └── migrations/               # 数据库迁移脚本目录
│       └── init_db.sql          # 初始化数据库脚本
│
├── ui/                            # 用户界面目录
│   ├── __init__.py
│   ├── resources/                # UI资源文件目录
│   │   ├── icons/              # 图标文件
│   │   ├── styles/             # QSS样式文件
│   │   └── ui_files/           # Qt Designer UI文件(.ui)
│   │
│   ├── login/                   # 登录相关界面
│   │   ├── __init__.py
│   │   ├── login_window.py     # 登录窗口
│   │   └── register_window.py  # 注册窗口
│   │
│   ├── admin/                   # 管理员界面
│   │   ├── __init__.py
│   │   ├── admin_main.py       # 管理员主界面
│   │   ├── user_manage.py      # 用户管理界面
│   │   └── system_settings.py  # 系统设置界面
│   │
│   ├── teacher/                 # 教师界面
│   │   ├── __init__.py
│   │   ├── teacher_main.py     # 教师主界面
│   │   ├── course_manage.py    # 课程管理界面
│   │   ├── experiment_edit.py  # 实验任务编辑界面
│   │   └── grade_manage.py     # 成绩管理界面
│   │
│   └── student/                 # 学生界面
│       ├── __init__.py
│       ├── student_main.py     # 学生主界面
│       ├── experiment_view.py  # 实验任务查看界面
│       └── submit_work.py      # 作业提交界面
│
├── utils/                        # 工具类目录
│   ├── __init__.py
│   ├── file_handler.py          # 文件处理工具（Excel/CSV/TXT）
│   ├── encryption.py            # 加密工具（密码加密等）
│   ├── validators.py            # 数据验证工具
│   └── logger.py                # 日志工具
│
├── services/                     # 业务逻辑层目录
│   ├── __init__.py
│   ├── auth_service.py          # 认证服务
│   ├── user_service.py          # 用户管理服务
│   ├── course_service.py        # 课程管理服务
│   ├── experiment_service.py    # 实验任务服务
│   └── grade_service.py         # 成绩管理服务
│
├── tests/                        # 测试目录
│   ├── __init__.py
│   ├── test_models/            # 模型测试
│   ├── test_services/         # 服务测试
│   └── test_utils/            # 工具类测试
│
└── docs/                         # 文档目录
    ├── api/                     # API文档
    ├── database/               # 数据库设计文档
    └── user_guide/            # 用户使用手册 




管理员账号和教师账号都没有"查看实验按钮" 只有学生有查看实验按钮
学生没有实验管理，和用户管理
教师账号的实验管理只能看见自己发布的实验，和学生提交的实验,并且能统计分数
教师账号的用户管理能看见自己学生的信息，和完成的实验与未完成的实验
管理员账号能看见所有实验室实验，能看见并修改删除添加所有用户，管理也能


bug 1  获取数据库数据失败 原因 数据库的datetime 不精确到毫秒， python datetime 包里的datetime().now() 会精确到毫秒，导致数据存储与读取不一致

bug 2 窗口设置完后点击会消失 原因 是局部变量， 函数结束后会消失，但是如果创建类属性，就不会消失

bug 3 管理员修改学生教师id后依旧能看见原教师的实验

bug 4 点击按钮后报错， 原因 写错ui文件名， 导致找不到原因

bug 5 打包失败，原因，把空文件打包

bug6 打包成功后运行失败， 原因找不到特定目录， 原因打包后的文件根目录与运行的根目录不一样， 需要再根目录后加_internal

特性1 使用 sqlsite 数据库， 原因，方便 适合小体积系统
特效2 对密码使用哈希加密， 
特性3 偶然用这种及时提交的数据库能够多线程登录
特性4 显示提交人数， 学生绑定特定教师
特性5 无需配置python环境  只需点击exe文件就能运行
特性6 全程使用日志管理
特性7 代码具有很强的健壮性， 防止程序报错

特性8
2.3 SQLite3 数据库​
轻量级嵌入式关系型数据库，具备以下优势：​
单文件存储：数据存储于单个.db文件，无需服务器配置，适合中小规模数据管理。​
ACID 特性：支持事务处理，确保数据一致性（如用户删除操作同时更新关联表记录）。​
Python 原生支持：通过sqlite3模块实现无缝交互，支持参数化查询防止 SQL 注入。

2. ACID 特性
ACID 是关系型数据库的四大核心特性，确保数据操作的可靠性和一致性：

原子性（Atomicity）：事务中的操作要么全部成功，要么全部回滚。
示例：转账操作中，从账户 A 扣款和向账户 B 加款必须同时完成，若中途出错则恢复原状，避免资金丢失。
一致性（Consistency）：事务执行前后，数据始终符合预定的约束（如主键唯一、外键关联）。
示例：用户删除订单时，系统会自动更新关联的 “订单详情表” 和 “库存表”，确保数据一致（如删除订单后，库存自动回补）。
隔离性（Isolation）：多个事务并发执行时，相互之间互不干扰，避免脏读、幻读等问题。
持久性（Durability）：事务提交后，数据变更永久保存，即使系统崩溃也不会丢失。
 Python 原生支持
集成方式：Python 标准库自带 sqlite3 模块，无需额外安装即可直接操作 SQLite 数据库。
核心功能：
无缝交互：通过 sqlite3.connect() 方法连接 .db 文件，使用 SQL 语句执行增删改查
参数化查询：通过 ? 占位符传递参数，防止 SQL 注入攻击。
事务支持：通过 conn.commit() 和 conn.rollback() 管理事务，结合 ACID 特性确保数据安全
该数据库（如 SQLite）凭借轻量、可靠、易集成的特点，成为以下场景的优选方案：

嵌入式设备：智能家居、工业控制器等资源受限环境。
移动应用：Android 和 iOS 系统默认支持 SQLite，用于本地数据存储（如聊天记录、离线缓存）。
桌面工具：Python 开发的小工具（如笔记软件、数据统计工具），直接嵌入数据库无需额外部署。
原型开发：快速验证业务逻辑，后期可平滑迁移至 MySQL、PostgreSQL 等大型数据库。
OOP 是一种编程范式，通过将现实世界中的事物抽象为类（Class）和对象（Object），以 ** 封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）** 为核心原则，实现代码的模块化、可维护性和复用性。
核心思想：将数据（属性）和操作数据的方法（函数）封装在类中，通过类的实例（对象）交互完成业务逻辑。
1. DatabaseManager 类：封装数据库操作
功能定位：
作为数据库交互的统一入口，封装底层数据库操作细节（如连接管理、表结构创建、增删改查），向上层提供简洁的接口。
关键设计：
封装性：
将数据库连接（如 SQLite 的 sqlite3.connect()）、游标管理（cursor）、SQL 语句执行等细节隐藏在类内部，外部仅通过类方法（如 connect()、create_table()、query()）调用。
统一接口：
无论底层数据库如何变更（如从 SQLite 切换到 MySQL），只需修改类内部实现，上层调用代码（如业务逻辑层）无需改动，符合开闭原则（对扩展开放，对修改封闭）。
优势：
避免重复编写数据库连接代码，降低冗余。
集中管理数据库操作，便于统一处理异常、事务和性能优化（如连接池）。
解耦业务逻辑与数据访问层，提升系统可维护性。
2. BaseWindow 基类：通过继承实现代码复用
功能定位：
定义三端界面（如 Web、桌面端、移动端）的公共方法，作为所有界面类的父类，避免重复编写通用逻辑。
关键设计：
继承机制：
子类（如 LoginWindow、UserProfileWindow）继承 BaseWindow，自动拥有父类的属性和方法（如权限校验、数据刷新），只需实现差异化逻辑。
代码复用：
三端界面的公共逻辑（如登录验证、界面刷新机制）只需在基类中实现一次，子类直接继承，减少重复开发工作量。
优势：
提升开发效率，避免 “重复造轮子”。
统一界面行为标准，如所有界面的权限校验逻辑一致，降低维护成本。
支持多态扩展：子类可重写父类方法（如不同界面的 refresh_data 逻辑），灵活适配业务需求。
3. Model-View 分离：解耦数据与界面
设计模式：
Model（模型）：负责数据存储和业务逻辑（如数据库表结构、数据校验规则）。
View（视图）：负责界面展示和用户交互（如按钮、输入框、图表）。
信号通信：Model 与 View 不直接依赖，通过 “信号（Signal）- 槽（Slot）” 机制通信（类似观察者模式）。
示例：用户在 View 中点击 “删除按钮”，触发 “删除信号”；Model 接收到信号后执行删除操作，操作完成后发送 “数据变更信号”，View 接收到信号后自动刷新列表。
关键优势：
低耦合：
View 无需知道 Model 的数据存储细节（如使用 SQLite 还是 MySQL），Model 也不依赖 View 的界面框架（如 Tkinter、PyQt 或 Web 框架），两者通过抽象的信号机制交互。
可维护性：
修改界面布局（如调整按钮位置）时，无需改动 Model 代码；更换数据库类型时，只需修改 Model 层，View 层不受影响。
测试便利：
可独立测试 Model 的业务逻辑（如数据校验、事务处理），无需依赖界面组件，提升单元测试效率
三、OOP 设计的整体价值
模块化：将系统拆分为数据库管理、界面基类、模型 - 视图等模块，每个模块职责清晰，便于团队协作开发。
可扩展性：新增功能时（如支持新的数据库类型或界面风格），可通过继承或新增子类实现，无需修改现有核心代码。
可维护性：统一的接口设计和代码复用机制，降低因需求变更导致的代码修改成本，提升系统长期维护效率。
灵活性：通过多态和信号机制，允许不同模块独立演化（如替换界面框架或数据库引擎），适应技术栈升级需求。
总结
该系统通过 OOP 思想，将数据库操作、界面逻辑和数据模型抽象为可复用的类，结合继承、封装和信号机制实现了高内聚、低耦合的架构。这种设计不仅提升了开发效率，还为系统的可维护性、扩展性和稳定性奠定了基础，尤其适合需要长期迭代的复杂应用（如跨平台管理系统、企业级工具软件）。